# A multi tissue, single cell data-based prediction model identifies precancerous cells in normal tissues

Clara Guan1,2, Sherry Dong1,2, Xiuzhen Huang1,2

## 

- **plot_accuracy.py** — Plot accuracy curves from training logs.
- **plot_auc.py** — Plot ROC-AUC curves from training logs.
- **predict_only.py** — Run inference with a saved model.
- **train_clean.py** — Train a model on cleaned/filtered data.
- **train_final.py** — Final training pipeline for full experiments.
- **train-ensemble.py** — Train an ensemble (e.g., vote/average of multiple models).
- **train4_single.py** — Train a single model variant.
- **trainensemblesafe.py** — Ensemble training with additional safety checks.

## Environment

- **Python**: 3.9+ recommended

Install dependencies:
```bash
pip install -r requirements.txt
```

> The `requirements.txt` was auto-generated by scanning the import statements in the scripts. If you have a custom environment (GPU/CUDA, specific Torch versions, etc.), pin the versions accordingly.

## Quickstart

### 1) Prepare your data
- Input format is typically TSV/CSV with samples × features. Labels are expected by the training scripts (see CLI flags below for specifics).
- Keep a separate split for training/validation/test where applicable.

### 2) Train
Common entry points:
```bash
# Cleaned-data training
python train_clean.py

# Full pipeline training
python train_final.py

# Single-model training
python train4_single.py

# Ensemble training
python train-ensemble.py

# Ensemble training with extra safety
python trainensemblesafe.py
```

### 3) Predict
Run inference with a saved model/checkpoint:
```bash
python predict_only.py --input data/test.tsv --output results/predictions.tsv
```

### 4) Plot metrics
```bash
# Accuracy curve
python plot_accuracy.py --log logs/train.log --output figures/accuracy.png

# ROC-AUC curve
python plot_auc.py --log logs/train.log --output figures/auc.png
```


## Data Preparation
```
.
├─ data/
│  ├─ train.tsv
│  ├─ valid.tsv
│  └─ test.tsv
├─ logs/
├─ models/
├─ results/
└─ figures/
```

## 
- Use stratified splits for classification tasks.
- Keep random seeds fixed for reproducibility (e.g., `--seed 42` if provided).
- For large datasets, consider saving intermediate artifacts (encoders, scalers, splits) to speed up iteration.

