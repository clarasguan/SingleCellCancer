# A multi tissue, single cell data-based prediction model identifies precancerous cells in normal tissues

Clara Guan1,2, Sherry Dong1,2, Xiuzhen Huang1,2

## 

- **plot_accuracy.py** — Plot accuracy curves from training logs.
- **plot_auc.py** — Plot ROC-AUC curves from training logs.
- **predict_only.py** — Run inference with a saved model.
- **train_clean.py** — Train a model on cleaned/filtered data.
- **train_final.py** — Final training pipeline for full experiments.
- **train-ensemble.py** — Train an ensemble (e.g., vote/average of multiple models).
- **train4_single.py** — Train a single model variant.
- **trainensemblesafe.py** — Ensemble training with additional safety checks.

## Environment

- **Python**: 3.9+ recommended

Install dependencies:
```bash
pip install -r requirements.txt
```

> The `requirements.txt` was auto-generated by scanning the import statements in the scripts. If you have a custom environment (GPU/CUDA, specific Torch versions, etc.), pin the versions accordingly.

## Quickstart

### 1) Prepare your data
- Input format is typically TSV/CSV with samples × features. Labels are expected by the training scripts (see CLI flags below for specifics).
- Keep a separate split for training/validation/test where applicable.

### 2) Train
Common entry points:
```bash
# Cleaned-data training
python train_clean.py

# Full pipeline training
python train_final.py

# Single-model training
python train4_single.py

# Ensemble training
python train-ensemble.py

# Ensemble training with extra safety
python trainensemblesafe.py
```

### 3) Predict
Run inference with a saved model/checkpoint:
```bash
python predict_only.py --input data/test.tsv --output results/predictions.tsv
```

### 4) Plot metrics
```bash
# Accuracy curve
python plot_accuracy.py --log logs/train.log --output figures/accuracy.png

# ROC-AUC curve
python plot_auc.py --log logs/train.log --output figures/auc.png
```


## Data Preparation
```
.
├─ data/
│  ├─ train.tsv
│  ├─ valid.tsv
│  └─ test.tsv
├─ logs/
├─ models/
├─ results/
└─ figures/
```

## 
- Use stratified splits for classification tasks.
- Keep random seeds fixed for reproducibility (e.g., `--seed 42` if provided).
- For large datasets, consider saving intermediate artifacts (encoders, scalers, splits) to speed up iteration.



#Preprocessing:

Gene Expression Data Processing Toolkit

This repository contains a collection of Python scripts for processing large-scale single-cell gene expression data stored in .h5ad and .pkl formats. The scripts provide utilities for extracting metadata, chunking large datasets, converting formats, counting gene occurrences, and preparing gene-level subsets.

Scripts Overview
1. extract_chunked.py / extract_chunked_normal.py

Purpose: Splits large .h5ad files into manageable .pkl chunks using Scanpy’s backed mode.

Outputs:

Observation metadata (obs.csv)

Chunked .pkl files containing subsets of cells and gene expression matrices.

Usage:

python extract_chunked.py
python extract_chunked_normal.py


Adjusts paths for processed vs. normal datasets.

2. chunk.py / chunk_normal.py

Purpose: Converts .pkl chunks into dense .txt files while filtering for a selected set of genes (e.g., those with exactly 613 occurrences).

Workflow:

Loads gene_counts.txt.

Extracts expression values for selected genes.

Saves results in 100-cell chunks as tab-delimited .txt.

Usage:

python chunk.py
python chunk_normal.py

3. extractall.py / extractall_normal.py

Purpose: Extracts and saves only the observation metadata (obs) from .h5ad files.

Outputs: Observation tables as *_observation.txt.

Usage:

python extractall.py
python extractall_normal.py

4. count_gene.py

Purpose: Counts the frequency of each gene across all .pkl files in both normal and processed datasets.

Outputs: gene_counts.txt containing counts in the format:

GENE_NAME: COUNT


Usage:

python count_gene.py

5. convert.py

Purpose: Converts .pkl files (with pandas DataFrames) into .csv.

Outputs: .csv files in ../processed_csv/.

Usage:

python convert.py

6. prepare_gene_ind.py

Purpose: Prepares subsets of processed data for a selected gene list.

Workflow:

Reads genes from selected_genes.txt.

Loads .pkl files, filters for the selected genes.

Splits data into chunks of 100 and saves as .pkl.

Usage:

python prepare_gene_ind.py

Typical Workflow

Chunk .h5ad files
Run extract_chunked.py or extract_chunked_normal.py to break raw .h5ad into smaller .pkl chunks.

Count genes across chunks
Run count_gene.py to generate gene_counts.txt.

Filter and extract selected genes
Use chunk.py or chunk_normal.py to create .txt files containing only selected genes.

Optional conversions

Use convert.py to convert .pkl to .csv.

Use extractall.py / extractall_normal.py for metadata only.

Use prepare_gene_ind.py for gene-specific subsets.

Requirements

Python 3.x

Packages:

numpy

pandas

scipy

scanpy

anndata

